// Generated by CoffeeScript 1.10.0
$(function() {
  var $form, dialogs, make_create_dialog, reload_possible_targets, update_backup_jobs_table;
  $form = $("#backup-create");
  dialogs = {};
  update_backup_jobs_table = function() {
    var cb;
    cb = function(jobs) {
      var $cur, $node, $schedule, $selection, buttons, data, i, job, len, msg, row, selection_label, table;
      table = $("#backup-jobs tbody");
      table.empty();
      row = $('<tr/>', {
        "class": 'backup-job-entry'
      });
      for (i = 0, len = jobs.length; i < len; i++) {
        job = jobs[i];
        data = $.extend({
          failed: false,
          running: false
        }, job);
        $cur = row.clone().appendTo(table);
        $cur.data('job_info', data);
        $cur.append($('<td/>', {
          text: data.label
        }));
        selection_label = (function() {
          switch (data.selection) {
            case "data":
              return "All user's data (/home/<all users>)";
            case "music":
              return "All music (/home/storage/music)";
            case "pictures":
              return "All pictures (/home/storage/pictures)";
            case "video":
              return "All videos (/home/storage/video)";
            case "storage":
              return "Storage (/home/storage)";
          }
        })();
        $selection = $('<td/>', {
          text: (function() {
            switch (data.selection) {
              case "data":
                return _("All user's data (/home/<all users>)");
              case "music":
                return _("All music (/home/storage/music)");
              case "pictures":
                return _("All pictures (/home/storage/pictures)");
              case "video":
                return _("All videos (/home/storage/video)");
              case "storage":
                return _("Storage (/home/storage)");
            }
          })(),
          id: data.target + "+selection"
        }).appendTo($cur);
        $schedule = $('<td/>', {
          text: (function() {
            switch (data.schedule) {
              case 'daily':
                return _('Daily (every night at two a clock)');
              case 'halfweekly':
                return _('Twice a week (every wednesday and sunday night)');
              case 'weekly':
                return _('Weekly (every sunday night)');
            }
          })(),
          id: data.target + "+schedule"
        }).appendTo($cur);
        if (data.running) {
          $cur.append($("<td/>", {
            text: _("Currently running")
          }));
        } else if (!data.hasrun) {
          $cur.append($("<td/>", {
            text: _("Not yet run")
          }));
        } else if (data.status === 0) {
          $cur.append($("<td/>", {
            text: _("Completed")
          }));
        } else {
          msg = "Rsync returned error " + data.status + ": " + ((function() {
            switch (data.status) {
              case 1:
                return _("Syntax or usage error");
              case 2:
                return _("Protocol incompatibility");
              case 3:
                return _("Errors selecting input/output files, dirs");
              case 4:
                return _("Requested action not supported: an attempt was made to manipulate 64-bit files on a platform that cannot support them; or an option was specified that is supported by the client and not by the server.");
              case 5:
                return _("Error starting client-server protocol");
              case 6:
                return _("Daemon unable to append to log-file");
              case 10:
                return _("Error in socket I/O");
              case 11:
                return _("Error in file I/O");
              case 12:
                return _("Error in rsync protocol data stream");
              case 13:
                return _("Errors with program diagnostics");
              case 14:
                return _("Error in IPC code");
              case 20:
                return _("Received SIGUSR1 or SIGINT");
              case 21:
                return _("Some error returned by waitpid()");
              case 22:
                return _("Error allocating core memory buffers");
              case 23:
                return _("Partial transfer due to error");
              case 24:
                return _("Partial transfer due to vanished source files");
              case 25:
                return _("The --max-delete limit stopped deletions");
              case 30:
                return _("Timeout in data send/receive");
              case 35:
                return _("Timeout waiting for daemon connection");
            }
          })());
          $node = $("<td/>", {
            "class": "ui-backup-job-failed"
          }).appendTo($cur);
          $node.append(_("Failed") + " (");
          $("<a/>", {
            href: "#",
            html: _("why?"),
            click: function(e) {
              e.preventDefault();
              $.alert(msg, $.sprintf(_("Backup job for %s on %s failed"), data.username, data.type), null, null, {
                width: 500,
                height: 300
              });
              return false;
            }
          }).appendTo($node);
          $node.append(")");
        }
        buttons = $('<button/>', {
          "class": "submit backup-job-remove",
          html: _("Remove")
        });
        buttons = buttons.add($('<button/>', {
          "class": "submit backup-job-edit",
          html: _("Edit")
        }));
        $cur.append($('<td/>', {
          html: buttons
        }));
      }
      return $(".backup-job-entry").first().trigger("click");
    };
    return $.post(config.prefix + "/ajax_backup/get_backup_jobs", {}, cb, 'json');
  };
  update_backup_jobs_table();
  reload_possible_targets = function(cur) {
    var cb;
    cb = function(targets) {
      var host, html, i, id, j, label, len, len1, ref, ref1, ref2, ref3, type, username, uuid;
      $('#destinations-table tbody tr').remove();
      ref = targets.remote;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], id = ref1.id, type = ref1.type, username = ref1.username, host = ref1.host;
        html = "<tr>\n  <td>\n  <input type=\"radio\" name=\"destination\" id=\"destination-remote-" + id + "\" value=\"remote-" + id + "\"/>\n  <label for=\"destination-remote-" + id + "\">" + (type === 'ssh' ? "ssh://" + host : type) + " (" + username + ")</label>\n  </td>\n</tr>";
        $('#destinations-table').append(html);
      }
      ref2 = targets.local;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        ref3 = ref2[j], label = ref3.label, uuid = ref3.uuid;
        html = "<tr>\n  <td>\n  <input type=\"radio\" name=\"destination\" id=\"destination-local-" + uuid + "\" value=\"local-" + uuid + "\"/>\n  <label for=\"destination-local-" + uuid + "\">" + (_("External disk")) + " (" + label + ")</label>\n  </td>\n</tr>";
        $('#destinations-table').append(html);
      }
      if (cur) {
        return $("#destination-remote-" + cur).attr('checked', 'checked');
      }
    };
    return $.post(config.prefix + "/ajax_backup/get_possible_targets", {}, cb, 'json');
  };
  make_create_dialog = function() {
    var buttons, open_cb, options, step_show_cb;
    step_show_cb = (function(_this) {
      return function(e, data) {
        var buttons;
        buttons = dialogs.create.dialog("widget").find(".ui-dialog-buttonset button");
        buttons.button("enable");
        if (data.isLastStep) {
          buttons.eq(0).text($form.formwizard("option", "textSubmit"));
        } else {
          if (data.isFirstStep) {
            buttons.eq(1).button("disable");
          }
        }
        return buttons.eq(0).text($form.formwizard("option", "textNext"));
      };
    })(this);
    $form.live('step_shown', step_show_cb);
    open_cb = (function(_this) {
      return function(event, ui) {
        var buttons;
        reload_possible_targets();
        $form.trigger("reset");
        $form.formwizard("update_steps");
        buttons = dialogs.create.dialog("widget").find(".ui-dialog-buttonset button");
        buttons.eq(1).button("disable");
        buttons.eq(0).click(function() {
          if ($form.formwizard("option", "validationEnabled") && !$form.validate().numberOfInvalids()) {
            return buttons.button("disable");
          }
        });
        buttons.eq(1).click(function() {
          return buttons.button("disable");
        });
        return $form.find(".primary-field").focus();
      };
    })(this);
    options = {
      width: 600,
      minWidth: 600,
      minHeight: 300,
      resizable: true,
      position: ["center", 200],
      autoOpen: false,
      open: open_cb
    };
    buttons = [
      {
        text: _("Next"),
        "class": "ui-next-button ui-element-width-50",
        click: function() {
          return $form.formwizard("next");
        }
      }, {
        text: _("Back"),
        "class": "ui-prev-button ui-element-width-50",
        click: function() {
          return $form.formwizard("back");
        }
      }
    ];
    dialogs['create'] = $.dialog($("#backup-create-dialog"), "", buttons, options);
    return $("#backup-create-dialog").submit(function() {
      return false;
    });
  };
  make_create_dialog();
  $form.formwizard({
    resetForm: true,
    historyEnabled: !true,
    validationEnabled: true,
    formPluginEnabled: true,
    disableUIStyles: true,
    next: false,
    textNext: _("Next"),
    textBack: _("Back"),
    textSubmit: _("Complete"),
    showBackOnFirstStep: true,
    validationOptions: {
      rules: {
        selection: {
          required: true
        },
        destination: {
          required: true
        },
        schedule: {
          required: true
        }
      }
    },
    formOptions: {
      url: config.prefix + "/ajax_backup/create",
      type: "post",
      dataType: "json",
      reset: true,
      beforeSubmit: function() {
        return $.throbber.show();
      },
      success: function(data) {
        $.throbber.hide();
        dialogs.create.dialog("close");
        return update_backup_jobs_table();
      }
    }
  });
  $('select[name=type]').live('change', function() {
    switch ($(this).val()) {
      case 'ssh':
        return $('input[name=host]').closest('tr').show();
      default:
        return $('input[name=host]').closest('tr').hide();
    }
  });
  $("#backup-job-add").click(function() {
    $form.formwizard("reset");
    return dialogs.create.dialog("open");
  });
  $('#add-new-target').live('click', function() {
    var $dia, $dialog, open_cb, options;
    $dialog = $('#create-target').clone().removeAttr('id');
    open_cb = (function(_this) {
      return function() {
        var form;
        $dialog.find('select[name=type]').change();
        form = $dialog.find('form');
        form.validate({
          rules: {
            username: {
              required: true
            },
            password: {
              required: true
            }
          }
        });
        return form.ajaxForm({
          dataType: 'json',
          beforeSubmit: function() {
            return $.throbber.show();
          },
          success: function(data) {
            var html, txt;
            $.throbber.hide();
            if (data.error === 1) {
              alert(data.html);
              return;
            }
            reload_possible_targets(data.key);
            $dia.dialog('close');
            if (data.uuid && data.type !== 'ssh') {
              txt = (function() {
                switch (data.type) {
                  default:
                    return _("Please click <a href=\"%s/ajax_settings/get_remote_account_pubkey/%s\">here</a> to download the openssh key needed for backup");
                }
              })();
              html = $.sprintf(txt, config.prefix, data.uuid);
              return $.alert(html);
            }
          }
        });
      };
    })(this);
    options = {
      width: 600,
      minWidth: 600,
      minHeight: 300,
      resizable: true,
      position: ["center", 200],
      open: open_cb
    };
    return $dia = $.dialog($dialog, "", null, options);
  });
  $(".backup-job-remove").live("click", function(e) {
    var data;
    e.stopPropagation();
    data = $(this).closest("tr").data("job_info");
    $.confirm(_("Are you sure you want to permanently remove this backup job?"), _("Remove backup job"), [
      {
        text: _("Remove backup job"),
        click: function() {
          var cb;
          cb = (function(_this) {
            return function(data) {
              if (data.error) {
                update_status(false, data.html);
              } else {
                update_status(true, _("Backup job was removed from the system"));
              }
              $.throbber.hide();
              update_backup_jobs_table();
              return $(_this).dialog("close");
            };
          })(this);
          $.throbber.show();
          return $.post(config.prefix + "/ajax_backup/remove", {
            type: data.type,
            target: data.target,
            schedule: data.schedule,
            selection: data.selection
          }, cb, "json");
        },
        id: "backup-job-dialog-remove-confirm-button"
      }
    ]);
    return false;
  });
  return $(".backup-job-edit").live('click', function(e) {
    var $dia, data, options;
    e.stopPropagation();
    data = $(this).closest("tr").data("job_info");
    $form = $('<form/>');
    $form.dform({
      action: config.prefix + "/ajax_backup/update_job",
      method: 'post',
      html: [
        {
          type: 'h3',
          html: _('Edit your backup job here')
        }, {
          name: 'selection',
          id: 'selection',
          caption: _('Selection'),
          type: 'select',
          options: {
            "data": "All user's data (/home/<all users>)",
            "music": "All music (/home/storage/music)",
            "pictures": "All pictures (/home/storage/pictures)",
            "video": "All videos (/home/storage/video)",
            "storage": "Storage (/home/storage)"
          }
        }, {
          name: 'schedule',
          id: 'schedule',
          caption: _('Schedule'),
          type: 'select',
          options: {
            'daily': 'Daily (every night at two a clock)',
            'halfweekly': 'Twice a week (every wednesday and sunday night)',
            'weekly': 'Weekly (every sunday night)'
          }
        }, {
          type: 'submit',
          value: _('Update')
        }
      ]
    });
    options = {
      width: 600,
      minWidth: 600,
      minHeight: 300,
      resizable: true,
      position: ["center", 200],
      open: (function(_this) {
        return function() {
          $form.find('#selection').val(data.selection);
          $form.find('#schedule').val(data.schedule);
          return $form.ajaxForm({
            data: {
              target: data.target,
              oldschedule: data.schedule,
              oldselection: data.selection
            },
            dataType: 'json',
            beforeSubmit: function() {
              return $.throbber.show();
            },
            success: function(data) {
              $.throbber.hide();
              if (data.error === 1) {
                alert(data.html);
                return;
              }
              update_backup_jobs_table();
              return $dia.dialog("close");
            }
          });
        };
      })(this)
    };
    return $dia = $.dialog($form, "", null, options);
  });
});
