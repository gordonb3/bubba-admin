#!/usr/bin/env python

import yaml
import tempfile
import subprocess
import os
import errno
import argparse
import textwrap
import syslog
import socket


class MountError(Exception):
    pass

accounts_file = '/etc/bubba/remote_accounts.yml'
local_jobs_file = '/etc/bubba/local_backup_jobs.yml'
remote_jobs_file = '/etc/bubba/remote_backup_jobs.yml'
status_file = '/var/lib/bubba/backup_status.yml'
tmp_dir = '/home/admin/.backup/tmp'
partial_dir = '/home/admin/.backup/partials'
log_file = '/var/log/bubba-backup.log'
ssh_keydir = '/etc/bubba/ssh-keys'

if not os.path.exists(tmp_dir):
    os.makedirs(tmp_dir)

if not os.path.exists(partial_dir):
    os.makedirs(partial_dir)


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def write_status(value, job, schedule, selection):
    if not job in status:
        status[job] = {}
    if not schedule in status[job]:
        status[job][schedule] = {}
    status[job][schedule][selection] = value

    stream = file(status_file, 'w')
    yaml.dump(status, stream, default_flow_style=False)


def run_rsync(user, host, targetdir, source, uuid):
    excludefile = tempfile.NamedTemporaryFile(delete=False)
    keyfile = os.path.join(ssh_keydir, uuid)
    excludefile.write(source)
    excludefile.close()

    cmd = [
        'rsync',
        '--quiet',
        '--checksum',
        '--recursive',
        '--links',
        '--owner',
        '--group',
        '--perms',
        '--executability',
        '--times',
        '--sparse',
        '--rsh', '''\
        /usr/bin/ssh \
        -F /dev/null \
        -p 22 \
        -l {user} \
        -i {keyfile} \
        -o StrictHostKeyChecking=no \
        -c aes128-cbc,blowfish-cbc\
        '''.format(keyfile=keyfile, user=user),
        '--stats',
        '--log-file', log_file,
        '--partial',
        '--exclude-from', excludefile.name,
        '/home',
        "{user}@{host}:{dir}".format(user=user, host=host, dir=targetdir)
    ]

    retval = subprocess.call(cmd)
    os.unlink(excludefile.name)
    return retval


def run_local_rsync(source, targetdir):
    mkdir_p(targetdir)
    excludefile = tempfile.NamedTemporaryFile(delete=False)
    excludefile.write(source)
    excludefile.close()

    cmd = [
        'rsync',
        '--archive',
        '--no-owner',
        '--no-perms',
        '--no-group',
        '--safe-links',
        '--modify-window', "1",
        '--quiet',
        '--checksum',
        '--recursive',
        '--stats',
        '--log-file', log_file,
        '--partial',
        '--exclude-from', excludefile.name,
        '/home',
        targetdir
    ]
    retval = subprocess.call(cmd)
    os.unlink(excludefile.name)
    return retval


def mount(uuid, mountdir):
    dev = subprocess.Popen(['blkid', '-U', uuid], stdout=subprocess.PIPE).communicate()[0]
    if dev.strip():
        subprocess.call(['mount', dev.strip(), mountdir])
    else:
        raise MountError(uuid)


def umount(mountdir):
    subprocess.call(['umount', mountdir])

selection_mapping = {
    'data': """\
    + /home/
    - /home/storage
    - /home/admin/HiDrive
    - /home/admin/ssh
    - /home/.cache
    - /*
    """,
    'storage': """\
    + /home/
    + /home/storage
    - /home/storage/extern
    - /home/*
    - /*
    """,
    'music': """\
    + /home/
    + /home/storage/
    + /home/storage/music
    - /home/*
    - /home/storage/*
    - /*
    """,
    'video': """\
    + /home/
    + /home/storage/
    + /home/storage/video
    - /home/*
    - /home/storage/*
    - /*
    """,
    'pictures': """\
    + /home/
    + /home/storage/
    + /home/storage/pictures
    - /home/*
    - /home/storage/*
    - /*
    """
}

hosts_mapping = {
    'HiDrive': 'rsync.hidrive.strato.com',
    'ssh': None
}

targetdir_mapping = {
    'HiDrive': 'users/{user}/backup_{host}_{selection}',
    'local': 'backup_{host}_{selection}',
    'ssh': 'backup_{host}_{selection}'
}
try:
    accounts = yaml.load(open(accounts_file, 'r'))
except IOError:
    accounts = {}

try:
    local_jobs = yaml.load(open(local_jobs_file, 'r'))
except IOError:
    local_jobs = {}

try:
    remote_jobs = yaml.load(open(remote_jobs_file, 'r'))
except IOError:
    remote_jobs = {}

try:
    status = yaml.load(open(status_file, 'r'))
except IOError:
    status = {}

parser = argparse.ArgumentParser(description="Run scheduled backup jobs", prog="bubba-run-backupjobs")
parser.add_argument('schedule', type=str, choices=('daily', 'weekly', 'halfweekly'), help="Which schedule to run")
args = parser.parse_args()

for job, schedules in remote_jobs.items():
    account = accounts[job]
    if not args.schedule in schedules:
        continue
    for selection in schedules[args.schedule]:
        syslog.syslog(
            syslog.LOG_INFO,
            "Running {schedule} backup job for {selection} to remote {user}@{type}".format(
                selection=selection,
                schedule=args.schedule,
                user=account['username'],
                type=account['type']
            )
        )
        host = hosts_mapping[account['type']]
        if not host:
            host = account['host']
        write_status(-1, job, args.schedule, selection)
        retval = run_rsync(
            user=account['username'],
            host=host,
            targetdir=targetdir_mapping[account['type']].format(
                user=account['username'],
                host=socket.gethostname(),
                selection=selection
            ),
            source=textwrap.dedent(selection_mapping[selection]),
            uuid=account['uuid']
        )
        write_status(retval, job, args.schedule, selection)


for job, schedules in local_jobs.items():
    if not args.schedule in schedules:
        continue
    for selection in schedules[args.schedule]:
        mountdir = tempfile.mkdtemp()
        try:
            mount(job, mountdir)
        except MountError as e:
            syslog.syslog(syslog.LOG_ERR, "Failed to mount device with {uuid} for {schedule} backup".format(uuid=job, schedule=args.schedule))
            os.rmdir(mountdir)

        syslog.syslog(syslog.LOG_INFO, "Running {schedule} local backup job for {selection} to device {uuid}".format(selection=selection, schedule=args.schedule, uuid=job))
        write_status(-1, job, args.schedule, selection)
        retval = run_local_rsync(
            source=textwrap.dedent(selection_mapping[selection]),
            targetdir=os.path.join(mountdir, targetdir_mapping['local'].format(
                host=socket.gethostname(),
                selection=selection
            ))
        )
        umount(mountdir)
        write_status(retval, job, args.schedule, selection)
