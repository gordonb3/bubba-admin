#!/usr/bin/python
from twisted.internet import task, reactor
import os


leds = ["bubba3:red:error","bubba3:green:programming","bubba3:blue:active"]

def led_set_color(color):
    global leds
    for led in range(0,3):
        node = open("/sys/class/leds/"+leds[led]+"/brightness", "wb")
        node.write(str(color[led]))
        node.close()


def led_get_color():
    global leds
    color = []
    for led in range(0,3):
        node = open("/sys/class/leds/"+leds[led]+"/brightness", "rb")
        color.append(node.read())
        node.close()
    return color


def rotate(l, y=-1):
    if len(l) == 0:
        return l
    y = y % len(l)
    return l[y:] + l[:y]



def buzzsetup():
    if not os.path.exists("/sys/class/gpio/gpio40"):
        node = open("/sys/class/gpio/export", "wb")
        node.write("40")
        node.close()
    node = open("/sys/class/gpio/gpio40/direction", "wb")
    node.write("out")
    node.close()

 

def buzzer(status):
    node = open("/sys/class/gpio/gpio40/value", "wb")
    node.write(str(status))
    node.close()
    return 1 - status



colorlist = ["0","0","255"]
buzzstatus = 0

def main():

    def updateColor():
        global buzzstatus, colorlist
        buzzstatus = buzzer(buzzstatus)
        led_set_color(colorlist)
        colorlist = rotate(colorlist)

    def endIt(initial_color):
        buzzer(0)
        l.stop()
        led_set_color(initial_color)
        reactor.stop()

    initial_color = led_get_color()
    buzzsetup()
    l = task.LoopingCall(updateColor)
    l.start(0.1)
    reactor.callLater(20, endIt, initial_color)

    reactor.run()

if __name__ == '__main__':
    main()

